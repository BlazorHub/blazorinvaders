@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using BlazorInvaders.GameObjects
@inject IJSRuntime JsRuntime;

<div class="row">
    <div class="col text-center">
        <h2>BlazorInvaders - a Space Invaders implementation</h2>
        <p>Built using Blazor</p>
    </div>
</div>
<div class="row justify-content-center">
    <div class="col text-center" id="canvas">
        <div class="game-canvas" id="canvasContainer">
            <BECanvas @ref="_canvas"></BECanvas>
        </div>
    </div>
</div>
<div class="row">
    <div class="col text-center">
        <button class="btn btn-success" @onclick:preventDefault @onclick="StartGame">Start</button>
    </div>
</div>
<img @ref="_spritesheet" hidden src="assets/sprites.png" />
@code{

    BECanvasComponent _canvas;
    ElementReference _spritesheet;
    Canvas2DContext _context;
    readonly GameTime _gameTime = new GameTime();
    private Game _game;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
            _context = await _canvas.CreateCanvas2DAsync();
            _game = new Game();
        }
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int screenWidth, int screenHeight)
    {
        _gameTime.TotalTime = timeStamp;
        await Update(screenWidth, screenHeight);
        await Render(screenWidth, screenHeight);
    }

    private async ValueTask Update(int screenWidth, int screenHeight)
    {

    }

    private async ValueTask Render(int width, int height)
    {
        await _context.ClearRectAsync(0, 0, width, height);
        if (_game.Started)
        {
            List<Task> draw = new List<Task>();
            foreach (var a in _game.Aliens)
            {
                Console.WriteLine($"{a.CurrentPosition.X}, {a.CurrentPosition.Y},");
                //draw.Add
                //(
                await _context.DrawImageAsync(_spritesheet,
                a.Sprite.TopLeft.X, a.Sprite.TopLeft.Y, 20, 14, a.CurrentPosition.X, a.CurrentPosition.Y, 40, 28);
                //);
            }
            //await Task.WhenAll(draw);
        }
    }

    private void StartGame()
    {
        _game.Start(_spritesheet);
    }

}