@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using BlazorInvaders.GameObjects
@inject IJSRuntime JsRuntime;

<div class="row">
    <div class="col text-center">
        <h2>Blazor Invaders - a Space Invaders implementation</h2>
    </div>
</div>
<div class="row justify-content-center">
    <div class="col text-center" id="canvas">
        <div tabindex="0" @onkeydown="@(async (e) => { await KeyDown(e); })" @onkeydown:preventDefault class="game-canvas" id="canvasContainer">
            <BECanvas @ref="_canvas"></BECanvas>
        </div>
    </div>
</div>

<img @ref="_spriteSheet" hidden src="assets/sprites.png" />
@code{

    BECanvasComponent _canvas;
    ElementReference _spriteSheet;
    Game _game;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _game = new Game(870, 500);
            await _game.Init(_canvas, _spriteSheet);
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this), 870, 500);

        }
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        if (_game.Started)
        {
            _game.Update(timeStamp);
        }
        await _game.Render();
    }

    [JSInvokable]
    public void StartGame(float timeStamp)
    {
        _game.Start(_spriteSheet, timeStamp);
    }

    protected async ValueTask KeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine($"{e.Key} {e.Code}");
        if (e.Code == "ArrowLeft")
        {
            _game.MovePlayer(Direction.Left);
        }
        if(e.Code == "ArrowRight")
        {
            _game.MovePlayer(Direction.Right);
        }
        if(e.Code == "Space")
        {
            if (_game.Started)
            {
                _game.Fire();
            }
            else
            {
                await JsRuntime.InvokeAsync<object>("startGame");
            }


        }
    }
}